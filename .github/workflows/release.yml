name: Release

on: workflow_dispatch

env:
  BASE_REPO: intellecta-lk/intellecta

jobs:
  get-version:
    name: semantic-release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic-release.outputs.new_release_published }}
      new-release-version: v${{ steps.semantic-release.outputs.new_release_version }}
      new-release-channel: ${{ steps.semantic-release.outputs.new_release_channel }}
      new-release-notes:  ${{ steps.semantic-release.outputs.new_release_channel }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.BASE_REPO }}
          token: ${{secrets.PRIVATE_TOKEN}}
      - id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
          working_directory: app
          dry_run: true
        env:
          GITHUB_TOKEN: ${{secrets.PRIVATE_TOKEN}}
      - run: echo "${{ steps.semantic-release.outputs.new_release_version }}"

  build:
    runs-on: ubuntu-latest
    needs: get-version
    if: needs.get-version.outputs.new-release-published == 'true'
    steps:
      - run: echo "${{ needs.get-version.outputs.new-release-version }}"

 
    

  release:
    runs-on: ubuntu-latest
    needs: 
      - build
      - get-version
    if: needs.get-version.outputs.new-release-published == 'true'
    steps:
      - name: Build
        run: |
          touch Release.txt
          echo ${{ github.sha }} > Release.txt
      - name: Test
        run: cat Release.txt
      - name: Release
        run: echo "${{ needs.get-version.outputs.new-release-version }}"
      # - run: |
      #    gh release upload ${{ needs.get-version.outputs.new-release_version }}  \ 
      #         Release.txt \
      #     -R https://github.com/${{github.repository}} \
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      # - run: | 
      #     gh release edit ${{ needs.get-version.outputs.new-release-version }}  \ 
      #     --draft=false \
      #     --notes ${{ needs.get-version.outputs.new-release-notes }} \
      #     -R https://github.com/${{github.repository}} \
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      - run: |
          gh release create ${{ needs.get-version.outputs.new-release-version }}  \ 
          -R https://github.com/${{ env.BASE_REPO }} \
          ./Release.txt 
        env:
          GH_TOKEN: ${{secrets.PRIVATE_TOKEN}}
      - run: |
          gh release create ${{ needs.get-version.outputs.new-release-version }}  \ 
          -R https://github.com/${{github.repository}} \ 
          ./Release.txt 
        env:
          GH_TOKEN: ${{ github.token }}
          


  # delete_tag_if_failed:
  #   runs-on: ubuntu-latest
  #   needs: 
  #      - build
  #      - get-version
  #      - release
  #   if: always() && contains(needs.*.result, 'failure')
  #   steps:
  #     - run: |
  #         gh release delete ${{ needs.get-version.outputs.new-release-version }}  \
  #         -R https://github.com/${{ env.BASE_REPO }} \
  #          --cleanup-tag 
  #       env:
  #         GH_TOKEN: ${{secrets.PRIVATE_TOKEN}}
  #     # - run: |
  #     #     git push --delete https://${{secrets.PRIVATE_TOKEN}}@github.com/${{ env.BASE_REPO }} YOUR_TAG_NAME
     
          

      
    
    
    
      
    
